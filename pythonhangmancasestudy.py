# -*- coding: utf-8 -*-
"""PythonHangmanCaseStudy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YvPPEsNk0k5EBwqADfOIhxwGUF5ILQXs

# **Hangman Case Study**

In Python, a Hangman game is a word-guessing game where the player tries to guess a secret word by guessing letters, one at a time, with a limited number of incorrect guesses before the game ends.

Here's a breakdown of the game and how it's implemented in Python:
Game Mechanics: **bold text** *italicized text*

1. Word Selection: The game randomly picks a secret word from a list of words.

2. Player Input: The player guesses letters one at a time.

3. Feedback: The game indicates whether the guessed letter is in the word.

4. Incorrect Guesses: Each incorrect guess reduces the number of remaining attempts (or "lives").

5. Winning/Losing: The player wins if they guess all the letters in the word before running out of attempts; otherwise, they lose.




Python Implementation:
Libraries:
You'll likely use Python's built-in random module to select a random word and input() to get player input.

Data Structures:
Lists or strings can be used to store the secret word, guessed letters, and the current state of the word being guessed (e.g., underscores for unguessed letters).

Logic:
The game logic involves:
Initializing the game with a secret word and the number of attempts.

Getting player input (a letter guess).
Checking if the guessed letter is in the secret word.

Updating the display (e.g., revealing the letter if correct, drawing a part of the hangman if incorrect).

Checking for win/lose conditions.

Key Concepts:
Random Word Selection: Using random.choice() to pick a word from a list.
User Input: Using input() to get the player's guess.

String Manipulation: Working with strings to check for letters, update the display, and compare the guessed word with the secret word.

Conditional Logic: Using if/else statements to handle different game scenarios (correct/incorrect guesses, win/lose).

Loops: Using while loops to control the game flow and allow for multiple guesses.

What is Hangman?

Hangman is a classic word guessing game. The computer selects a secret word, and the player tries to guess it letter by letter. The player has limited chances (lives), and with each wrong guess, a life is lost. The game ends when the player either guesses the word correctly or runs out of lives.

ðŸ§  Step-by-Step Plan for Hangman Game

Import Required Modules

Define Word List

Select a Random Word

Game Variables Initialization

Display Word with Blanks

Take User Input

Check Guess and Update Display

Handle Win/Lose Conditions

Loop Until Game Ends

ðŸ§¾ Key Concepts Used

Concept Description

random.choice(): Selects a random word from list

list comprehension :Used to create the blank display

for loop: To update the display when a guess is correct

while loop : Runs the game until user wins or loses

if-else : To check correctness of guess

input() : Takes letter guess from user
"""

#Import random to pick a random word
import random

# Step 2: List of words (can be expanded or taken from a file)
word_list = ["apple", "banana", "cherry", "date", "elderberry"]

# Step 3: Select a random word from the list
chosen_word = random.choice(word_list)

# Step 4: Initialize variables
word_lenght = len(chosen_word)
display= ['_' for _ in range(word_lenght)]  # Blanks for each letter

# Number of wrong guesses allowed
lives = 6

# To store already guessed letters
gussed_letter = []

# Optional: Hangman stages for visual display
hangman_stages = [
    '''
      +---+
      |   |
          |
          |
          |
          |
    ========
    ''',
    # 6 lives left
    '''
      +---+
      |   |
      o   |
          |
          |
          |
    ========
    ''',
    #5 lives left
    '''
      +---+
      |   |
      o   |
      |   |
          |
          |
   =========
   ''',
    #4 lives left
    '''
      +---+
      |   |
      o   |
    / |   |
          |
          |
    ========
    ''',
    #3 lives left
    '''
      +---+
      |   |
      o   |
    / |\\ |
          |
          |
  ===========
  ''',
    #2  lives left
    '''
      +---+
      |   |
      o   |
    / |\\ |
     /    |
          |
  ==========
  ''',
    #1 lives left
    '''
      +---+
      |   |
      o   |
    / |\\ |
     / \  |
          |
  ==========
  '''
  #0 lives left- Game over



]

# Step 5-9: Main game loop
print('Welcome to Hangman!')
while '_' in display and lives > 0:
  print('\nWord:' + ''.join(display))
  guess = input('Guess a letter: ').lower()

   # Input validation
  if not guess.isalpha() or len(guess) != 1:
      print('! Please enter a single letter.')
      continue
  if guess in gussed_letter:
      print('You have already guessed that letter.')
      continue

  gussed_letter.append(guess)

  if guess in chosen_word:
    print('Correct!')
  for i in range(word_lenght):
    if chosen_word[i] == guess:
      display[i] = guess

  else:
      lives -= 1
      print('Wrong! You lost a life')
      print(hangman_stages[6-lives])


# End game messages
if '_' not in display:
    print('\nCongratulations! You guessed the word:', chosen_word)
else:
    print('\nGame over! The word was:', chosen_word)

